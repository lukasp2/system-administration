1-1 What is the difference between using $* and $@ to access all parameters to a script or function? Hint: it has to do with how spaces in parameters are handled when $* or $@ are placed within (double) quotation marks (as in the for loop example, below). 
Report: An example that demonstrates the difference between $* and $@.

Från http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html:	
The implementation of "$*" has always been a problem and realistically should have been replaced with the behavior of "$@". In almost every case where coders use "$*", they mean "$@". "$*" Can cause bugs and even security holes in your software.

$* kommer att behandla parametrarna som skickas in som en sträng (avgränsade av den första karaktären i $IFS). $@ skapar en array.
$* och $@ kommer dock att se identiska ut såvida man inte använder citationstecken likt "$@" och "$*".

med skriptet:
#!/bin/bash
echo "med: \"$*\":"
for a in "$*"; do
  echo $a;
done;

echo ""
echo "med: \"$@\":"
for a in "$@"; do
  echo $a;
done;

får vi utskriften:
med "$*":
1 2 3 4

med "$@":
1 
2 
3 4

2-1 Why is $@ quoted (inside quotation marks) in the for loop.
Eftersom $@ hade behandlat varje input som en ociterad sträng så hade ex. "3 4" i exemplet ovan tolkats som två element: 3 och 4.
Har vi en fil som heter "hej tjabba" så blir det alltså problem.

2-2 Could $* have been used instead of $@? Explain your answer. Hint: if you got exercise 3-1 right, this one should be easy to answer.
$* hade brutit upp ex. "3 4" till "3" och "4".

3-1 How do while loops work.
Report: An example that demonstrates how a while loop works.

i="0"
while [ i -lt 4 ]
  echo "."
  i=$[$i+1]
done

*"./test.sh 1" skriver ut 4 punkter*

5-1 What does ${line:0:1} do? Note that it is a form of parameter expansion.
${parameter:position:offset}
It evaluates the line variable, on string position 0, offset 1.

5-2 What does a colon on a single line do (the true branch of the if statement in the example).
Its just means true. It has no purpose but is needed as a conditional block cant be empty in bash

5-3 Bash has an alternate syntax for command substitution (backticks). What is it.
$()

5-4 What does $(()) do? What is this called in the bash man page.
Its an arithmetic expansion, it allows for evaluation of arithmatic expressions.

5-5 How could you count the number of dotfiles using a single pipeline (no loops or variables, just simple commands). You may want to read about commands like grep and wc.
ls -Al | grep -sce .* | wc -l

6-1 Look at the first two lines of the script (after the initial "#!" line).

a) What does the backslash at the end of the first of these mean.
It escapes the newline

b) What do the braces around echo and exit mean? What would happen if you used parenthesis instead of braces.
Both echo and exit will be executed if it gets to that point. If we didnt have the braces, the program would always exit.

6-2 What does the local command do at the beginning of smtp_send.
Its a local variable

6-3 Why call sleep 1 in the script.
To not overflow socat?

https://www.ida.liu.se/~TDDI41/labs/lab5-sct.shtml









